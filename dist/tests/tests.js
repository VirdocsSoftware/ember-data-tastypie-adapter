eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - .\');\ntest(\'ember-data-tastypie-adapter.js should pass jshint\', function() { \n  ok(true, \'ember-data-tastypie-adapter.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-data-tastypie-adapter.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - ember-data-tastypie-adapter\');\ntest(\'ember-data-tastypie-adapter/tastypie_adapter.js should pass jshint\', function() { \n  ok(true, \'ember-data-tastypie-adapter/tastypie_adapter.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-data-tastypie-adapter/tastypie_adapter.jshint.js");

eval("(function() {if (!QUnit.urlParams.nojshint) {\nmodule(\'JSHint - ember-data-tastypie-adapter\');\ntest(\'ember-data-tastypie-adapter/tastypie_serializer.js should pass jshint\', function() { \n  ok(true, \'ember-data-tastypie-adapter/tastypie_serializer.js should pass jshint.\'); \n});\n\n}})();//@ sourceURL=ember-data-tastypie-adapter/tastypie_serializer.jshint.js");

eval("(function() {var get = Ember.get, set = Ember.set, hash = Ember.RSVP.hash;\n\nvar env, store, adapter;\nvar originalAjax, passedUrl, passedVerb, passedHash;\nvar Person, Role, Group, Task, Comment, Post;\n\nmodule(\"integration/django_tastypie_adapter - DjangoTastypieAdapter\", {\n  setup: function() {\n    Person = DS.Model.extend({\n      name: DS.attr(\'string\'),\n    });\n\n    Group = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      people: DS.hasMany(\'person\')\n    });\n\n    Role = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      primaryKey: \'_id\'\n    });\n\n    Task = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      owner: DS.belongsTo(\'person\')\n    });\n    \n    Comment = DS.Model.extend({\n      text: DS.attr(\'string\')\n    });\n    \n    Post = DS.Model.extend({\n      text: DS.attr(\'string\'),\n      comments: DS.hasMany(\'comment\')\n    })\n\n    env = setupStore({\n      person: Person,\n      group: Group,\n      role: Role,\n      task: Task,\n      comment: Comment,\n      post: Post,\n      adapter: DS.DjangoTastypieAdapter\n    });\n\n    store = env.store;\n    adapter = env.adapter;\n\n    env.store.modelFor(\'person\');\n    env.store.modelFor(\'group\');\n    env.store.modelFor(\'role\');\n    env.store.modelFor(\'task\');\n\n    env.container.register(\'serializer:application\', DS.DjangoTastypieSerializer);\n    env.container.register(\'serializer:-django-tastypie\', DS.DjangoTastypieSerializer);\n    env.container.register(\'adapter:-django-tastypie\', DS.DjangoTastypieAdapter);\n    env.dtSerializer = env.container.lookup(\"serializer:-django-tastypie\");\n    env.dtAdapter    = env.container.lookup(\"adapter:-django-tastypie\");\n\n    passedUrl = passedVerb = passedHash = null;\n  }\n});\n\nfunction ajaxResponse(value) {\n  adapter.ajax = function(url, verb, hash) {\n    passedUrl = url;\n    passedVerb = verb;\n    passedHash = hash;\n\n    return Ember.RSVP.resolve(value);\n  };\n}\n\nvar expectUrl = function(url, desc) {\n  equal(passedUrl, url, \"the URL is: \" + url);\n};\n\nvar expectType = function(type) {\n  equal(passedVerb, type, \"the HTTP method is: \" + type);\n};\n\nvar expectData = function(hash) {\n  deepEqual(passedHash.data, hash, \"the hash was passed along\");\n};\n\nvar expectState = function(model, state, value) {\n  if (value === undefined) { value = true; }\n\n  var flag = \"is\" + state.charAt(0).toUpperCase() + state.substr(1);\n  equal(get(model, flag), value, \"the person is \" + (value === false ? \"not \" : \"\") + state);\n};\n\nvar expectStates = function(arr, state, value) {\n  arr.forEach(function(model) {\n    expectState(model, state, value);\n  });\n};\n\ntest(\"can create a record\", function() {\n    var record = store.createRecord(\'person\');\n    set(record, \'name\', \'bar\');\n\n    equal(get(record, \'name\'), \'bar\', \"property was set on the record\");\n});\n\ntest(\'buildURL - should not use plurals\', function() {\n  equal(adapter.buildURL(\'person\', 1), \"/api/v1/person/1/\");\n});\n\n/*\ntest(\"creating a person makes a POST to /api/v1/person, with the data hash\", function() {\n  ajaxResponse({ id: 1,  name: \"Tom Dale\", resource_uri: \'/api/v1/person/1/\'});\n  var person = store.createRecord(\'person\', {name: \'Tom Dale\'});\n\n  person.save().then(async(function(person) {\n    equal(passedUrl, \"/api/v1/person/\");\n    equal(passedVerb, \"POST\");\n    expectData({ name: \"Tom Dale\" });\n\n    equal(person.get(\'id\'), \"1\", \"the post has the updated ID\");\n    equal(person.get(\'isDirty\'), false, \"the post isn\'t dirty anymore\");\n  }));\n\n});\n*/\n\ntest(\"find - basic payload\", function() {\n\n  ajaxResponse({ id: 1, name: \"Rails is omakase\", resource_uri: \'/api/v1/person/1/\' });\n\n  store.find(\'person\', 1).then(async(function(person) {\n    equal(passedUrl, \"/api/v1/person/1/\");\n    equal(passedVerb, \"GET\");\n    equal(passedHash, undefined);\n\n    equal(person.get(\'id\'), \"1\");\n    equal(person.get(\'name\'), \"Rails is omakase\");\n  }));\n});\n\ntest(\"updating a person makes a PUT to /people/:id with the data hash\", function() {\n  set(adapter, \'bulkCommit\', false);\n\n  store.push(\'person\', { id: 1, name: \"Yehuda Katz\" });\n\n  store.find(\'person\', 1).then(async(function(person) {\n    set(person, \'name\', \"Brohuda Brokatz\");\n\n    ajaxResponse();\n    return person.save();\n  })).then(async(function(person) {\n    equal(passedUrl, \"/api/v1/person/1/\");\n    equal(passedVerb, \"PUT\");\n    expectData({ name: \"Brohuda Brokatz\" });\n\n    equal(person.get(\'id\'), \"1\");\n    equal(person.get(\'isDirty\'), false, \"the person isn\'t dirty anymore\");\n    equal(person.get(\'name\'), \"Brohuda Brokatz\");\n  }));\n\n});\n\ntest(\"updates are not required to return data\", function() {\n  set(adapter, \'bulkCommit\', false);\n\n  store.push(\'person\', { id: 1, name: \"Yehuda Katz\" });\n\n  var _person;\n\n  store.find(\'person\', 1).then(async(function(person) {\n    expectState(person, \'new\', false);\n    expectState(person, \'loaded\');\n    expectState(person, \'dirty\', false);\n\n    _person = person;\n\n    set(person, \'name\', \"Brohuda Brokatz\");\n    expectState(person, \'dirty\');\n\n    ajaxResponse();\n    return person.save();\n  })).then(async(function(person) {\n    expectUrl(\"/api/v1/person/1/\", \"the plural of the model name with its ID\");\n    expectType(\"PUT\");\n\n    expectState(person, \'saving\', false);\n\n    equal(_person, store.getById(\'person\', 1), \"the same person is retrieved by the same ID\");\n    equal(get(person, \'name\'), \"Brohuda Brokatz\", \"the data is preserved\");\n  }));\n\n});\n\n/* COMMENTED IN EMBER DATA\ntest(\"updating a record with custom primaryKey\", function() {\n  Ember.run(function() {\n    set(adapter, \'bulkCommit\', false);\n    store.load(Role, { _id: 1, name: \"Developer\" });\n\n    role = store.find(Role, 1);\n\n    set(role, \'name\', \"Manager\");\n    store.commit();\n  });\n\n  expectUrl(\"api/v1/role/1/\", \"the plural of the model name with its ID\");\n  ajaxHash.success({ role: { _id: 1, name: \"Manager\" } });\n});*/\n\n\ntest(\"deleting a person makes a DELETE to /api/v1/person/:id/\", function() {\n    set(adapter, \'bulkCommit\', false);\n\n    store.push(\'person\', { id: 1, name: \"Tom Dale\" });\n\n    store.find(\'person\', 1).then(async(function(person) {\n      ajaxResponse();\n\n      person.deleteRecord();\n      return person.save();\n    })).then(async(function(person) {\n      expectUrl(\"/api/v1/person/1/\", \"the plural of the model name with its ID\");\n      expectType(\"DELETE\");\n\n      equal(person.get(\'isDirty\'), false, \"the post isn\'t dirty anymore\");\n      equal(person.get(\'isDeleted\'), true, \"the post is now deleted\");\n    }));\n});\n\ntest(\"finding all people makes a GET to /api/v1/person/\", function() {\n\n  ajaxResponse({\"objects\": [{ id: 1, name: \"Yehuda Katz\", resource_uri: \'/api/v1/person/1/\' }]});\n\n  store.find(\'person\').then(async(function(people) {\n    expectUrl(\"/api/v1/person/\", \"the plural of the model name\");\n    expectType(\"GET\");\n    var person = people.objectAt(0);\n\n    expectState(person, \'loaded\');\n    expectState(person, \'dirty\', false);\n\n    equal(person, store.getById(\'person\', 1), \"the record is now in the store, and can be looked up by ID without another Ajax request\");\n  }));\n});\n\n\ntest(\"since gets set if needed for pagination\", function() {\n\n  ajaxResponse({\"objects\": [{id: 1, name: \"Roy\", resource_uri: \'/api/v1/person/1/\'}, {id: 2, name: \"Moss\", resource_uri: \'/api/v1/person/2/\'}],\n            \"meta\": {limit: 2, next: \"nextUrl&offset=2\", offset: 0, previous: null, total_count: 25}});\n\n  store.findAll(\'person\').then(async(function(people) {\n    expectUrl(\"/api/v1/person/\", \"the findAll URL\");\n    equal(people.get(\'meta.offset\', 0, \"Offset is set\"));\n    equal(people.get(\'meta.next\', \"nextUrl&offset=2\", \"Next is set\"));\n    equal(people.get(\'meta.totalCount\', 25, \"Total count is correct\"));\n    \n    ajaxResponse({\"objects\": [{id: 3, name: \"Roy\", resource_uri: \'/api/v1/person/3/\'}, {id: 4, name: \"Moss\", resource_uri: \'/api/v1/person/4/\'}],\n              \"meta\": {limit: 2, next: \"nextUrl&offset=4\", offset: 2, previous: \"previousUrl&offset=0\", total_count: 25}});\n    \n    return store.findAll(\'person\');\n  })).then(async(function(morePeople) {\n    deepEqual(passedHash.data, { offset: \"2\" });\n    \n    equal(store.metadataFor(\'person\').offset, 2, \"Offset is correct\");\n    expectUrl(\"/api/v1/person/\", \"the findAll URL is the same with the since parameter\");\n  }));\n\n});\n\n\ntest(\"finding a person by ID makes a GET to /api/v1/person/:id/\", function() {\n  ajaxResponse({ id: 1, name: \"Yehuda Katz\", resource_uri: \'/api/v1/person/1/\' });\n\n  store.find(\'person\', 1).then(async(function(person) {\n    expectUrl(\"/api/v1/person/1/\", \"the model name with the ID requested\");\n    expectType(\"GET\");\n\n    expectState(person, \'loaded\', true);\n    expectState(person, \'dirty\', false);\n\n    equal(person, store.getById(\'person\', 1), \"the record is now in the store, and can be looked up by ID without another Ajax request\");\n  }));\n});\n\n\ntest(\"findByIds generates a tastypie style url\", function() {\n  adapter.coalesceFindRequests = true;\n  ajaxResponse({ objects: [\n      { id: 1, name: \"Rein Heinrichs\", resource_uri: \'/api/v1/person/1/\'},\n      { id: 2, name: \"Tom Dale\", resource_uri: \'/api/v1/person/2/\' },\n      { id: 3, name: \"Yehuda Katz\", resource_uri: \'/api/v1/person/3/\' }\n    ]\n  });\n\n  store.findByIds(\'person\', [1, 2, 3]).then(async(function(people) {\n      expectUrl(\"/api/v1/person/set/1;2;3/\");\n      expectType(\"GET\");\n\n      var rein = store.getById(\'person\', 1),\n          tom = store.getById(\'person\', 2),\n          yehuda = store.getById(\'person\', 3);\n\n      deepEqual(rein.getProperties(\'id\', \'name\'), { id: \"1\", name: \"Rein Heinrichs\" });\n      deepEqual(tom.getProperties(\'id\', \'name\'), { id: \"2\", name: \"Tom Dale\" });\n      deepEqual(yehuda.getProperties(\'id\', \'name\'), { id: \"3\", name: \"Yehuda Katz\" });\n  }));\n});\n\n\n\ntest(\"finding many people by a list of IDs\", function() {\n  Group.reopen({ people: DS.hasMany(\'person\', { async: true }) });\n  adapter.coalesceFindRequests = true;\n\n  store.push(\'group\', { id: 1, name: \"Group 1\", people: [1, 2, 3]});\n  \n  store.find(\'group\', 1).then(async(function(group) {   \n    ajaxResponse({\"objects\":\n      [\n        { id: 1, name: \"Rein Heinrichs\", resource_uri: \'/api/v1/person/1/\' },\n        { id: 2, name: \"Tom Dale\", resource_uri: \'/api/v1/person/2/\' },\n        { id: 3, name: \"Yehuda Katz\", resource_uri: \'/api/v1/person/3/\' }\n        ]});\n  \n    ok(true, \"passed\");\n  \n    return group.get(\'people\');\n  })).then(async(function(people) {\n    expectUrl(\"/api/v1/person/set/1;2;3/\");\n    expectType(\"GET\");\n\n    var rein = store.getById(\'person\', 1),\n        tom = store.getById(\'person\', 2),\n        yehuda = store.getById(\'person\', 3);\n\n    deepEqual(rein.getProperties(\'id\', \'name\'), { id: \"1\", name: \"Rein Heinrichs\" });\n    deepEqual(tom.getProperties(\'id\', \'name\'), { id: \"2\", name: \"Tom Dale\" });\n    deepEqual(yehuda.getProperties(\'id\', \'name\'), { id: \"3\", name: \"Yehuda Katz\" });\n\n    deepEqual(people.toArray(), [ rein, tom, yehuda ], \"The correct records are in the array\");\n  }));\n});\n\n\ntest(\"finding people by a query\", function() {\n  var people, rein, tom, yehuda;\n\n  ajaxResponse({\n    objects: [\n      { id: 1, name: \"Rein Heinrichs\", resource_uri: \'/api/v1/person/1/\' },\n      { id: 2, name: \"Tom Dale\", resource_uri: \'/api/v1/person/2/\' },\n      { id: 3, name: \"Yehuda Katz\", resource_uri: \'/api/v1/person/3/\' }\n    ]\n  });\n\n  store.find(\'person\', {page: 1}).then(async(function(people) {\n    equal(passedUrl, \"/api/v1/person/\");\n    equal(passedVerb, \"GET\");\n    deepEqual(passedHash.data, { page: 1 });\n\n    equal(get(people, \'length\'), 3, \"the people are now loaded\");\n\n    rein = people.objectAt(0);\n    equal(get(rein, \'name\'), \"Rein Heinrichs\");\n    equal(get(rein, \'id\'), 1);\n\n    tom = people.objectAt(1);\n    equal(get(tom, \'name\'), \"Tom Dale\");\n    equal(get(tom, \'id\'), 2);\n\n    yehuda = people.objectAt(2);\n    equal(get(yehuda, \'name\'), \"Yehuda Katz\");\n    equal(get(yehuda, \'id\'), 3);\n\n    people.forEach(function(person) {\n      equal(get(person, \'isLoaded\'), true, \"the person is being loaded\");\n    });\n\n  }));\n});\n\ntest(\"if you specify a server domain then it is prepended onto all URLs\", function() {\n  adapter.setProperties({\n    host: \'http://localhost:8000\'\n  });\n  equal(adapter.buildURL(\'person\', 1), \"http://localhost:8000/api/v1/person/1/\");\n});\n\ntest(\"the adapter can use custom keys\", function() {\n  env.container.register(\'serializer:person\', DS.DjangoTastypieSerializer.extend({\n    attrs: { name: \'name_custom\' }\n  }));\n\n  ajaxResponse({ objects: [{ id: 1, name_custom: \"Rails is omakase\", resource_uri: \'/api/v1/person/1/\' }, { id: 2, name_custom: \"The Parley Letter\", resource_uri: \'/api/v1/person/2/\' }] });\n\n  store.findAll(\'person\').then(async(function(people) {\n    var person1 = store.getById(\'person\', 1),\n        person2 = store.getById(\'person\', 2);\n\n    deepEqual(person1.getProperties(\'id\', \'name\'), { id: \"1\", name: \"Rails is omakase\" }, \"Person 1 is loaded\");\n    deepEqual(person2.getProperties(\'id\', \'name\'), { id: \"2\", name: \"The Parley Letter\" }, \"Person 2 is loaded\");\n\n    equal(people.get(\'length\'), 2, \"The posts are in the array\");\n    equal(people.get(\'isLoaded\'), true, \"The RecordArray is loaded\");\n    deepEqual(people.toArray(), [ person1, person2 ], \"The correct records are in the array\");\n  }));\n});\n\ntest(\"creating an item with a belongsTo relationship urlifies the Resource URI (default key)\", function() {\n  store.push(\'person\', {id: 1, name: \"Maurice Moss\"});\n\n  store.find(\'person\', 1).then(async(function(person) {\n    expectState(person, \'new\', false);\n    expectState(person, \'loaded\');\n    expectState(person, \'dirty\', false);\n\n    var task = store.createRecord(\'task\', {name: \"Get a bike!\"});\n    expectState(task, \'new\', true);\n    expectState(task, \'dirty\', true);\n    set(task, \'owner\', person);\n\n    //ajaxResponse({ name: \"Get a bike!\", owner_id: \"/api/v1/person/1/\"});\n    ajaxResponse();\n\n    return task.save();\n  })).then(async(function(task) {\n    expectUrl(\'/api/v1/task/\', \'create URL\');\n    expectType(\"POST\");\n    expectData({ name: \"Get a bike!\", owner: \"/api/v1/person/1/\"});\n  }));\n\n});\n\n/*\ntest(\"creating an item with a belongsTo relationship urlifies the Resource URI (custom key)\", function() {\n  env.container.register(\'serializer:task\', DS.DjangoTastypieSerializer.extend({\n    attrs: { owner: \'owner_custom_key\' }\n  }));\n\n  store.push(\'person\', {id: 1, name: \"Maurice Moss\"});\n  store.find(\'person\', 1).then(async(function (person) {\n    var task = store.createRecord(\'task\', {name: \"Get a bike!\"});\n    task.set(\'owner\', person);\n\n    expectState(task, \'new\', true);\n    expectState(task, \'dirty\', true);\n\n    ajaxResponse();\n    return task.save();\n  })).then(async(function (task) {\n    expectUrl(\'/api/v1/task/\', \'create URL\');\n    expectType(\"POST\");\n    expectData({ name: \"Get a bike!\", owner_custom_key: \"/api/v1/person/1/\"});\n\n    expectState(task, \'new\', false);\n    expectState(task, \'dirty\', false);\n  }));\n});\n*/\n\ntest(\"adding hasMany relationships parses the Resource URI (default key)\", function() {\n\n  Person.reopen({\n    name: DS.attr(\'string\'),\n    group: DS.belongsTo(\'group\', { async: true })\n  });\n  \n  Group.reopen({\n    people: DS.hasMany(\'person\', { async: true })\n  });\n\n  store.push(\'person\', {id: 1, name: \"Maurice Moss\"});\n  store.push(\'person\', {id: 2, name: \"Roy\"});\n  store.push(\'group\', {id: 1, name: \"Team\"});\n\n  hash({ moss: store.find(\'person\', 1),\n         roy: store.find(\'person\', 2),\n         group: store.find(\'group\', 1) }).then(async(function(objects) {\n    var group = objects.group,\n        people;\n\n    return group.get(\'people\').then(async(function(people) {\n      people.pushObject(objects.moss);\n      people.pushObject(objects.roy);\n      \n      ajaxResponse();\n      return group.save();\n    }));\n  })).then(async(function(data) {\n    expectUrl(\'/api/v1/group/1/\', \'modify Group URL\');\n    expectType(\"PUT\");\n    expectData({name: \"Team\", people: [\'/api/v1/person/1/\', \'/api/v1/person/2/\'] });\n\n    return store.find(\'person\', 2);\n  })).then(async(function(person) {\n    equal(person.get(\'name\'), \'Roy\');\n    equal(person.get(\'group\').get(\'name\'), \'Team\');\n  }));\n\n});\n\ntest(\"async hasMany always returns a promise\", function() {\n  \n  Post.reopen({\n    comments: DS.hasMany(\'comment\', { async: true })\n  });\n  adapter.coalesceFindRequests = true;\n  \n  store.push(\'post\', { id: 1, text: \"Some text\", comments: [\'1\', \'2\']});\n  \n  store.find(\'post\', 1).then(async(function(post) {\n    ajaxResponse({\n      objects: [\n        { id: 1, text: \"Rein Heinrichs\", resource_uri: \'/api/v1/comment/1/\' },\n        { id: 2, text: \"Tom Dale\", resource_uri: \'/api/v1/comment/2/\' }\n      ]\n    });\n    ok(post.get(\'comments\') instanceof DS.PromiseArray, \"comments is a promise\");\n  }));\n  \n});\n\ntest(\"sync hasMany find with full=True\", function() {\n  \n  Post.reopen({\n    comments: DS.hasMany(\'comment\', { async: false })\n  });\n  \n  Comment.reopen({\n    post: DS.belongsTo(\'post\')\n  });\n  \n  ajaxResponse({\n    id: 1,\n    text: \"Some Text\",\n    comments: [\n      {id: 1, text: \'Comment 1\', post: \'/api/v1/post/1/\', resource_uri: \'/api/v1/comment/1/\'},\n      {id: 2, text: \'Comment 2\', post: \'/api/v1/post/1/\', resource_uri: \'/api/v1/comment/2/\'}\n    ],\n    resource_uri: \'/api/v1/post/1/\'\n  });\n  \n  store.find(\'post\', 1).then(async(function(post) {\n    ok(post.get(\'comments\') instanceof Ember.ArrayProxy, \"comments is not a promise\");\n    equal(post.get(\'text\'), \"Some Text\", \"the post has the correct data\");\n  }));\n  \n})\n\ntest(\"sync hasMany save should not need to resolve relationship\", function() {\n  \n  Post.reopen({\n    comments: DS.hasMany(\'comment\', { async: false })\n  });\n  \n  Comment.reopen({\n    post: DS.belongsTo(\'post\', { async: false })\n  });\n  \n  var post = store.push(\'post\', { id: 1, text: \"Some text\", comments: [1, 2]});\n  store.push(\'comment\', {id: 1, text: \"Comment 1\", post: post});\n  store.push(\'comment\', {id: 2, text: \"Comment 2\", post: post});\n  \n  adapter.findMany = function() {\n    ok(false, \"Should not get here.\");\n  }\n  \n  store.find(\'post\', 1).then(async(function(post) {\n    post.set(\'text\', \'New Text\');\n\n    equal(post.get(\'isDirty\'), true, \"the post dirty\");\n    \n    ajaxResponse();\n    return post.save();\n  })).then(async(function(post) {\n    expectUrl(\'/api/v1/post/1/\', \'modify Group URL\');\n    expectType(\"PUT\");\n    expectData({text: \"New Text\", comments: [\n        { id: \"1\", text: \'Comment 1\', post: \'/api/v1/post/1/\' },\n        { id: \"2\", text: \'Comment 2\', post: \'/api/v1/post/1/\' }\n    ]});\n    \n    equal(post.get(\'isDirty\'), false, \"the post is not dirty anymore\");\n    equal(post.get(\'text\'), \"New Text\", \"the post was updated\");\n  }));\n  \n});\n\ntest(\"async hasMany save should resolve promise before post\", function() {\n  \n  Post.reopen({\n    comments: DS.hasMany(\'comment\', { async: true })\n  });\n  \n  Comment.reopen({\n    post: DS.belongsTo(\'post\', { async: true })\n  });\n  adapter.coalesceFindRequests = true;\n  \n  store.push(\'post\', { id: 1, text: \"Some text\", comments: [1, 2]});\n  \n  var count = 0;\n  adapter.findMany = function() {\n    ok(count++ === 0, \"findHasMany called once\");\n    \n    return Ember.RSVP.resolve({ objects: [\n        {id: 1, text: \"Comment 1\", post: \'/api/v1/post/1/\', resource_uri: \'/api/v1/comment/1/\'}, \n        {id: 2, text: \"Comment 2\", post: \'/api/v1/post/1/\', resource_uri: \'/api/v1/comment/2/\'}\n        ]});\n  }\n  \n  store.find(\'post\', 1).then(async(function(post) {\n    post.set(\'text\', \'New Text\');\n\n    equal(post.get(\'isDirty\'), true, \"the post dirty\");\n    \n    ajaxResponse();\n    return post.save();\n  })).then(async(function(post) {\n    expectUrl(\'/api/v1/post/1/\', \'modify Group URL\');\n    expectType(\"PUT\");\n    expectData({text: \"New Text\", comments: [\'/api/v1/comment/1/\', \'/api/v1/comment/2/\'] });\n    \n    equal(post.get(\'isDirty\'), false, \"the post is not dirty anymore\");\n    equal(post.get(\'text\'), \"New Text\", \"the post was updated\");\n  }));\n});\n  \ntest(\"metadata is accessible\", function () {\n  ajaxResponse({\n    meta: { offset: 2, limit: 0 },\n    objects: [\n      {id: 1, name: \"Maurice Moss\"},\n      {id: 2, name: \"Roy\"},\n    ]\n  });\n  \n  store.findAll(\'person\').then(async(function (people) {\n    equal(\n      store.metadataFor(\'person\').offset,\n      2,\n      \"Metadata can be accessed with metadataFor\"\n      );\n  }));\n});\n\ntest(\"findQuery - payload \'meta\' is accessible on the record array\", function() {\n  ajaxResponse({\n    meta: { offset: 5 },\n    objects: [{id: 1, name: \"Roy\"}]\n  });\n\n  store.findQuery(\'person\', { page: 2 }).then(async(function(people) {\n    equal(\n      people.get(\'meta.offset\'),\n      5,\n      \"Reponse metadata can be accessed with recordArray.meta\"\n    );\n  }));\n});\n\ntest(\"findQuery - each record array can have it\'s own meta object\", function() {\n  ajaxResponse({\n    meta: { offset: 5 },\n    objects: [{id: 1, name: \"Roy\"}]\n  });\n\n  store.findQuery(\'person\', { page: 2 }).then(async(function(people) {\n    equal(\n      people.get(\'meta.offset\'),\n      5,\n      \"Reponse metadata can be accessed with recordArray.meta\"\n    );\n    ajaxResponse({\n      meta: { offset: 1 },\n      objects: [{id: 1, name: \"Maurice Moss\"}]\n    });\n    store.findQuery(\'person\', { page: 1}).then(async(function(newPeople){\n      equal(newPeople.get(\'meta.offset\'), 1, \'new array has correct metadata\');\n      equal(people.get(\'meta.offset\'), 5, \'metadata on the old array hasnt been clobbered\');\n    }));\n  }));\n});\n})();//@ sourceURL=tastypie_adapter_test.js");

eval("(function() {var get = Ember.get, set = Ember.set;\nvar HomePlanet, league, SuperVillain, superVillain, EvilMinion, YellowMinion, DoomsdayDevice, PopularVillain, Comment, Course, Unit, env;\n\nmodule(\"integration/django_tastypie_adapter - DjangoTastypieSerializer\", {\n  setup: function() {\n    SuperVillain = DS.Model.extend({\n      firstName:     DS.attr(\'string\'),\n      lastName:      DS.attr(\'string\'),\n      homePlanet:    DS.belongsTo(\"homePlanet\", {async: true}),\n      evilMinions:   DS.hasMany(\"evilMinion\", {async: true})\n    });\n    HomePlanet = DS.Model.extend({\n      name:          DS.attr(\'string\'),\n      villains:      DS.hasMany(\'superVillain\', {async: true})\n    });\n    EvilMinion = DS.Model.extend({\n      superVillain: DS.belongsTo(\'superVillain\'),\n      name:         DS.attr(\'string\')\n    });\n    YellowMinion = EvilMinion.extend();\n    DoomsdayDevice = DS.Model.extend({\n      name:         DS.attr(\'string\'),\n      evilMinion:   DS.belongsTo(\'evilMinion\', {polymorphic: true})\n    });\n    PopularVillain = DS.Model.extend({\n      name:         DS.attr(\'string\'),\n      evilMinions:  DS.hasMany(\'evilMinion\', {polymorphic: true})\n    });\n    Comment = DS.Model.extend({\n      body: DS.attr(\'string\'),\n      root: DS.attr(\'boolean\'),\n      children: DS.hasMany(\'comment\')\n    });\n    Course = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      prerequisiteUnits: DS.hasMany(\'unit\'),\n      units: DS.hasMany(\'unit\')\n    });\n    Unit = DS.Model.extend({\n      name: DS.attr(\'string\')\n    });\n    env = setupStore({\n      superVillain:   SuperVillain,\n      homePlanet:     HomePlanet,\n      evilMinion:     EvilMinion,\n      yellowMinion:   YellowMinion,\n      doomsdayDevice: DoomsdayDevice,\n      popularVillain: PopularVillain,\n      comment:        Comment,\n      course:         Course,\n      unit:           Unit,\n      adapter: DS.DjangoTastypieAdapter\n    });\n    env.store.modelFor(\'superVillain\');\n    env.store.modelFor(\'homePlanet\');\n    env.store.modelFor(\'evilMinion\');\n    env.store.modelFor(\'yellowMinion\');\n    env.store.modelFor(\'doomsdayDevice\');\n    env.store.modelFor(\'popularVillain\');\n    env.store.modelFor(\'comment\');\n    env.store.modelFor(\'course\');\n    env.store.modelFor(\'unit\');\n    env.container.register(\'serializer:application\', DS.DjangoTastypieSerializer);\n    env.container.register(\'serializer:-django-tastypie\', DS.DjangoTastypieSerializer);\n    env.container.register(\'adapter:-django-tastypie\', DS.DjangoTastypieAdapter);\n    env.dtSerializer = env.container.lookup(\"serializer:-django-tastypie\");\n    env.dtAdapter    = env.container.lookup(\"adapter:-django-tastypie\");\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      env.store.destroy();\n    });\n  }\n});\n\ntest(\"serialize\", function() {\n  league = env.store.createRecord(HomePlanet, { name: \"Villain League\", id: \"123\" });\n  var tom = env.store.createRecord(SuperVillain, { firstName: \"Tom\", lastName: \"Dale\", homePlanet: league });\n\n  var json = env.dtSerializer.serialize(tom);\n\n  deepEqual(json, {\n    first_name: \"Tom\",\n    last_name: \"Dale\",\n    evil_minions: [],\n    home_planet: \'/api/v1/homePlanet/\'+get(league, \"id\")+\'/\'\n  });\n});\n\ntest(\"serializeIntoHash\", function() {\n  league = env.store.createRecord(HomePlanet, { name: \"Umber\", id: \"123\" });\n  var json = {};\n\n  env.dtSerializer.serializeIntoHash(json, HomePlanet, league);\n\n  deepEqual(json, {\n    name: \"Umber\",\n    villains: []\n  });\n});\n\ntest(\"normalize\", function() {\n  var superVillain_hash = {first_name: \"Tom\", last_name: \"Dale\", home_planet: \"/api/v1/homePlanet/123/\", evil_minions: [\'/api/v1/evilMinion/1/\', \'/api/v1/evilMinion/2/\'], resource_uri: \'/api/v1/superVillain/1/\'};\n\n  var json = env.dtSerializer.normalize(SuperVillain, superVillain_hash, \"superVillain\");\n\n  deepEqual(json, {\n    id: \"1\",\n    firstName: \"Tom\",\n    lastName: \"Dale\",\n    homePlanet: \"123\",\n    evilMinions: [\"1\", \"2\"]\n  });\n});\n\ntest(\"extractSingle\", function() {\n  env.container.register(\'adapter:superVillain\', DS.DjangoTastypieAdapter);\n\n  var json_hash = {\n    id: \"1\", name: \"Umber\", villains: [\"/api/v1/super_villain/1/\"],\n    resource_uri: \'/api/v1/homePlanet/1/\'\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, HomePlanet, json_hash);\n\n  deepEqual(json, {\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    \"villains\": [\"1\"]\n  });\n});\n\ntest(\"extractSingle with embedded objects\", function() {\n  env.container.register(\'adapter:superVillain\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:homePlanet\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      villains: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:homePlanet\");\n  var json_hash = {\n    id: \"1\",\n    name: \"Umber\",\n    villains: [{\n      id: \"1\",\n      first_name: \"Tom\",\n      last_name: \"Dale\",\n      resource_uri: \"/api/v1/super_villain/1/\"\n    }],\n    resource_uri: \"/api/v1/home_planet/1/\"\n  };\n\n  var json = serializer.extractSingle(env.store, HomePlanet, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    name: \"Umber\",\n    villains: [\"1\"]\n  });\n\n  env.store.find(\"superVillain\", 1).then(async(function(minion) {\n    equal(minion.get(\'firstName\'), \"Tom\");\n  }));\n});\n\ntest(\"extractSingle with embedded objects inside embedded objects\", function() {\n  \n  SuperVillain.reopen({\n    homePlanet:    DS.belongsTo(\"homePlanet\"),\n    evilMinions:   DS.hasMany(\"evilMinion\")\n  });\n  \n  HomePlanet.reopen({\n    villains:      DS.hasMany(\'superVillain\')\n  });\n  \n  env.container.register(\'adapter:superVillain\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:homePlanet\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      villains: {embedded: \'always\'}\n    }\n  }));\n  env.container.register(\'serializer:superVillain\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      evilMinions: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:homePlanet\");\n  var json_hash = {\n    id: \"1\",\n    name: \"Umber\",\n    villains: [{\n      id: \"1\",\n      first_name: \"Tom\",\n      last_name: \"Dale\",\n      evil_minions: [{\n        id: \"1\",\n        name: \"Alex\",\n        resource_uri: \'/api/v1/evil_minions/1/\'\n      }],\n      resource_uri: \'/api/v1/super_villain/1/\'\n    }],\n    resource_uri: \'/api/v1/home_planet/1/\'\n  };\n\n  var json = serializer.extractSingle(env.store, HomePlanet, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    name: \"Umber\",\n    villains: [\"1\"]\n  });\n  env.store.find(\"superVillain\", 1).then(async(function(villain) {\n    equal(villain.get(\'firstName\'), \"Tom\");\n    equal(villain.get(\'evilMinions.length\'), 1, \"Should load the embedded child\");\n    equal(villain.get(\'evilMinions.firstObject.name\'), \"Alex\", \"Should load the embedded child\");\n  }));\n  env.store.find(\"evilMinion\", 1).then(async(function(minion) {\n    equal(minion.get(\'name\'), \"Alex\");\n  }));\n});\n\ntest(\"extractSingle with embedded objects of same type\", function() {\n  env.container.register(\'adapter:comment\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:comment\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      children: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:comment\");\n  var json_hash = {\n    id: \"1\",\n    body: \"Hello\",\n    root: true,\n    children: [{\n      id: \"2\",\n      body: \"World\",\n      root: false,\n      resource_uri: \'/api/v1/comment/2/\'\n    },\n    {\n      id: \"3\",\n      body: \"Foo\",\n      root: false,\n      resource_uri: \'/api/v1/comment/3/\'\n    }],\n    resource_uri: \'/api/v1/comment/1/\'\n  };\n  var json = serializer.extractSingle(env.store, Comment, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    body: \"Hello\",\n    root: true,\n    children: [\"2\", \"3\"]\n  }, \"Primary record was correct\");\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"body\"), \"World\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"comment\", \"3\").get(\"body\"), \"Foo\", \"Secondary records found in the store\");\n});\n\ntest(\"extractSingle with embedded objects inside embedded objects of same type\", function() {\n  env.container.register(\'adapter:comment\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:comment\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      children: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:comment\");\n  var json_hash = {\n    id: \"1\",\n    body: \"Hello\",\n    root: true,\n    children: [{\n      id: \"2\",\n      body: \"World\",\n      root: false,\n      children: [{\n        id: \"4\",\n        body: \"Another\",\n        root: false,\n        resource_uri: \'/api/v1/comment/4/\'\n      }],\n      resource_uri: \'/api/v1/comment/2/\'\n    },\n    {\n      id: \"3\",\n      body: \"Foo\",\n      root: false,\n      resource_uri: \'/api/v1/comment/3/\'\n    }],\n    resource_uri: \'/api/v1/comment/1/\'\n  };\n  var json = serializer.extractSingle(env.store, Comment, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    body: \"Hello\",\n    root: true,\n    children: [\"2\", \"3\"]\n  }, \"Primary record was correct\");\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"body\"), \"World\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"comment\", \"3\").get(\"body\"), \"Foo\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"comment\", \"4\").get(\"body\"), \"Another\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"children.length\"), 1, \"Should have one embedded record\");\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"children.firstObject.body\"), \"Another\", \"Should have one embedded record\");\n});\n\ntest(\"extractSingle with embedded objects of same type, but from separate attributes\", function() {\n  env.container.register(\'adapter:course\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:course\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      prerequisiteUnits: {embedded: \'always\'},\n      units: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:course\");\n  var json_hash = {\n    id: \"1\",\n    name: \"Course 1\",\n    prerequisite_units: [{\n      id: \"1\",\n      name: \"Unit 1\",\n      resource_uri: \'/api/v1/unit/1/\'\n    },{\n      id: \"3\",\n      name: \"Unit 3\",\n      resource_uri: \'/api/v1/unit/3/\'\n    }],\n    units: [{\n      id: \"2\",\n      name: \"Unit 2\",\n      resource_uri: \'/api/v1/unit/2/\'\n    },{\n      id: \"4\",\n      name: \"Unit 4\",\n      resource_uri: \'/api/v1/unit/4/\'\n    }],\n    resource_uri: \'/api/v1/course/1/\'\n  };\n  var json = serializer.extractSingle(env.store, Course, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    name: \"Course 1\",\n    prerequisiteUnits: [\"1\", \"3\"],\n    units: [\"2\", \"4\"]\n  }, \"Primary array was correct\");\n\n  equal(env.store.recordForId(\"unit\", \"1\").get(\"name\"), \"Unit 1\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"2\").get(\"name\"), \"Unit 2\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"3\").get(\"name\"), \"Unit 3\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"4\").get(\"name\"), \"Unit 4\", \"Secondary records found in the store\");\n});\n\ntest(\"extractArray\", function() {\n  env.container.register(\'adapter:superVillain\', DS.DjangoTastypieAdapter);\n\n  var json_hash = {\n    meta: {},\n    objects: [{id: \"1\", name: \"Umber\", villains: [\'/api/v1/superVillain/1/\'], resource_uri: \'/api/v1/homePlanet/1/\'}]\n  };\n\n  var array = env.dtSerializer.extractArray(env.store, HomePlanet, json_hash);\n\n  deepEqual(array, [{\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    \"villains\": [\"1\"]\n  }]);\n});\n\ntest(\"extractArray with embedded objects\", function() {\n  env.container.register(\'adapter:superVillain\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:homePlanet\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      villains: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:homePlanet\");\n\n  var json_hash = {\n    objects: [{\n      id: \"1\",\n      name: \"Umber\",\n      villains: [{\n        id: \"1\",\n        first_name: \"Tom\",\n        last_name: \"Dale\",\n        resource_uri: \'/api/v1/superVillain/1/\'\n      }],\n      resource_uri: \'/api/v1/homePlanet/1/\'\n    }]\n  };\n\n  var array = serializer.extractArray(env.store, HomePlanet, json_hash);\n\n  deepEqual(array, [{\n    id: \"1\",\n    name: \"Umber\",\n    villains: [\"1\"]\n  }]);\n\n  env.store.find(\"superVillain\", 1).then(async(function(minion){\n    equal(minion.get(\'firstName\'), \"Tom\");\n  }));\n});\n\ntest(\"extractArray with embedded objects of same type as primary type\", function() {\n  env.container.register(\'adapter:comment\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:comment\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      children: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:comment\");\n\n  var json_hash = {\n    objects: [{\n      id: \"1\",\n      body: \"Hello\",\n      root: true,\n      children: [{\n        id: \"2\",\n        body: \"World\",\n        root: false,\n        resource_uri: \'/api/v1/comment/2/\'\n      },\n      {\n        id: \"3\",\n        body: \"Foo\",\n        root: false,\n        resource_uri: \'/api/v1/comment/3/\'\n      }],\n      resource_uri: \'/api/v1/comment/1/\'\n    }]\n  };\n\n  var array = serializer.extractArray(env.store, Comment, json_hash);\n\n  deepEqual(array, [{\n    id: \"1\",\n    body: \"Hello\",\n    root: true,\n    children: [\"2\", \"3\"]\n  }], \"Primary array is correct\");\n\n  equal(env.store.recordForId(\"comment\", \"2\").get(\"body\"), \"World\", \"Secondary record found in the store\");\n  equal(env.store.recordForId(\"comment\", \"3\").get(\"body\"), \"Foo\", \"Secondary record found in the store\");\n});\n\ntest(\"extractArray with embedded objects of same type, but from separate attributes\", function() {\n  env.container.register(\'adapter:course\', DS.DjangoTastypieAdapter);\n  env.container.register(\'serializer:course\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      prerequisiteUnits: {embedded: \'always\'},\n      units: {embedded: \'always\'}\n    }\n  }));\n\n  var serializer = env.container.lookup(\"serializer:course\");\n  var json_hash = {\n    objects: [{\n      id: \"1\",\n      name: \"Course 1\",\n      resource_uri: \'/api/v1/course/1/\',\n      prerequisite_units: [{\n        id: \"1\",\n        name: \"Unit 1\",\n        resource_uri: \'/api/v1/unit/1/\'\n      },{\n        id: \"3\",\n        name: \"Unit 3\",\n        resource_uri: \'/api/v1/unit/3/\'\n      }],\n      units: [{\n        id: \"2\",\n        name: \"Unit 2\",\n        resource_uri: \'/api/v1/unit/2/\'\n      },{\n        id: \"4\",\n        name: \"Unit 4\",\n        resource_uri: \'/api/v1/unit/4/\'\n      }]\n    },{\n      id: \"2\",\n      name: \"Course 2\",\n      resource_uri: \'/api/v1/course/2/\',\n      prerequisite_units: [{\n        id: \"1\",\n        name: \"Unit 1\",\n        resource_uri: \'/api/v1/unit/1/\'\n      },{\n        id: \"3\",\n        name: \"Unit 3\",\n        resource_uri: \'/api/v1/unit/3/\'\n      }],\n      units: [{\n        id: \"5\",\n        name: \"Unit 5\",\n        resource_uri: \'/api/v1/unit/5/\'\n      },{\n        id: \"6\",\n        name: \"Unit 6\",\n        resource_uri: \'/api/v1/unit/6/\'\n      }]\n    }]\n  };\n  var json = serializer.extractArray(env.store, Course, json_hash);\n\n  deepEqual(json, [{\n    id: \"1\",\n    name: \"Course 1\",\n    prerequisiteUnits: [\"1\", \"3\"],\n    units: [\"2\", \"4\"]\n  },{\n    id: \"2\",\n    name: \"Course 2\",\n    prerequisiteUnits: [\"1\", \"3\"],\n    units: [\"5\", \"6\"]\n  }], \"Primary array was correct\");\n\n  equal(env.store.recordForId(\"unit\", \"1\").get(\"name\"), \"Unit 1\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"2\").get(\"name\"), \"Unit 2\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"3\").get(\"name\"), \"Unit 3\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"4\").get(\"name\"), \"Unit 4\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"5\").get(\"name\"), \"Unit 5\", \"Secondary records found in the store\");\n  equal(env.store.recordForId(\"unit\", \"6\").get(\"name\"), \"Unit 6\", \"Secondary records found in the store\");\n});\n\ntest(\"serialize polymorphic\", function() {\n  var tom = env.store.createRecord(YellowMinion,   {name: \"Alex\", id: \"124\"});\n  var ray = env.store.createRecord(DoomsdayDevice, {evilMinion: tom, name: \"DeathRay\"});\n\n  var json = env.dtSerializer.serialize(ray);\n\n  deepEqual(json, {\n    name:  \"DeathRay\",\n    evil_minionType: \"yellowMinion\",\n    evil_minion: \"/api/v1/evilMinion/124/\"\n  });\n});\n\ntest(\"serialize with embedded objects\", function() {\n  \n  SuperVillain.reopen({\n    homePlanet:    DS.belongsTo(\"homePlanet\"),\n    evilMinions:   DS.hasMany(\"evilMinion\", { async: true })\n  });\n  \n  HomePlanet.reopen({\n    villains:      DS.hasMany(\'superVillain\', { async: false })\n  });\n  \n  league = env.store.createRecord(HomePlanet, { name: \"Villain League\", id: \"123\" });\n  var tom = env.store.createRecord(SuperVillain, { id: 1, firstName: \"Tom\", lastName: \"Dale\", homePlanet: league });\n\n  env.container.register(\'serializer:homePlanet\', DS.DjangoTastypieSerializer.extend({\n    attrs: {\n      villains: {embedded: \'always\'}\n    }\n  }));\n  var serializer = env.container.lookup(\"serializer:homePlanet\");\n\n  var json = serializer.serialize(league);\n\n  deepEqual(json, {\n    name: \"Villain League\",\n    villains: [{\n      id: get(tom, \"id\"),\n      first_name: \"Tom\",\n      last_name: \"Dale\",\n      home_planet: \'/api/v1/homePlanet/\' + get(league, \"id\") +\'/\',\n      evil_minions: []\n    }]\n  });\n});\n\n/*\ntest(\"extractPolymorphic hasMany\", function() {\n  env.container.register(\'adapter:yellowMinion\', DS.DjangoTastypieAdapter);\n  PopularVillain.toString = function() { return \"PopularVillain\"; };\n  YellowMinion.toString = function() { return \"YellowMinion\"; };\n\n  var json_hash = {\n    id: 1,\n    name: \"Dr Horrible\",\n    evil_minions: [{\n      type: \"yellow_minion\",\n      id: 12,\n      resource_uri: \'/api/v1/evilMinion/12/\'}],\n    resource_uri: \'/api/v1/popularVillain/1/\'\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, PopularVillain, json_hash);\n\n  deepEqual(json, {\n    \"id\": 1,\n    \"name\": \"Dr Horrible\",\n    \"evilMinions\": [{\n      type: \"yellowMinion\",\n      id: 12\n    }]\n  });\n});\n\ntest(\"extractPolymorphic\", function() {\n  env.container.register(\'adapter:yellowMinion\', DS.DjangoTastypieAdapter);\n  EvilMinion.toString   = function() { return \"EvilMinion\"; };\n  YellowMinion.toString = function() { return \"YellowMinion\"; };\n\n  var json_hash = {\n    id: 1, name: \"DeathRay\", evil_minion: { type: \"yellowMinion\", id: 12, resource_uri: \'/api/v1/evil_minion/12/\'}, resource_uri: \'/api/v1/doomsday_device/1/\'\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, DoomsdayDevice, json_hash);\n\n  deepEqual(json, {\n    \"id\": 1,\n    \"name\": \"DeathRay\",\n    \"evilMinion\": {\n      type: \"yellowMinion\",\n      id: 12\n    }\n  });\n});\n\ntest(\"extractPolymorphic when the related data is not specified\", function() {\n  var json = {\n    id: 1, name: \"DeathRay\", resource_uri: \'/api/v1/doomsday_device/1/\'\n  };\n\n  json = env.dtSerializer.extractSingle(env.store, DoomsdayDevice, json);\n\n  deepEqual(json, {\n    \"id\": \"1\",\n    \"name\": \"DeathRay\",\n    \"evilMinion\": undefined\n  });\n});\n\ntest(\"extractPolymorphic hasMany when the related data is not specified\", function() {\n  var json = {\n    id: 1, name: \"Dr Horrible\", resource_uri: \'/api/v1/popular_villain/1/\'\n  };\n\n  json = env.dtSerializer.extractSingle(env.store, PopularVillain, json);\n\n  deepEqual(json, {\n    \"id\": \"1\",\n    \"name\": \"Dr Horrible\",\n    \"evilMinions\": undefined\n  });\n});\n\ntest(\"extractPolymorphic does not break hasMany relationships\", function() {\n  var json = {\n    id: 1, name: \"Dr. Evil\", evilMinions: [], resource_uri: \'/api/v1/popular_villain/1/\'\n  };\n\n  json = env.dtSerializer.extractSingle(env.store, PopularVillain, json);\n\n  deepEqual(json, {\n    \"id\": \"1\",\n    \"name\": \"Dr. Evil\",\n    \"evilMinions\": undefined\n  });\n});\n*/\n})();//@ sourceURL=tastypie_serializer_test.js");
